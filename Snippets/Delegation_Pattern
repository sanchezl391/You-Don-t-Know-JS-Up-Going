Example 1
  var Task = {
  	setID: function(ID) { this.id = ID; },
  	outputID: function() { console.log( this.id ); }
  };

  // make `XYZ` delegate to `Task`
  var XYZ = Object.create( Task );

  XYZ.prepareTask = function(ID,Label) {
  	this.setID( ID );
  	this.label = Label;
  };

  XYZ.outputTaskDetails = function() {
  	this.outputID();
  	console.log( this.label );
  };

  // ABC = Object.create( Task );
  // ABC ... = ...
  1. Both id and label data members from the previous class example are data
    properties directly on XYZ (neither is on Task). In general, with [[Prototype]]
    delegation involved, you want state to be on the delegators (XYZ, ABC), not on
    the delegate (Task).

  2. With the class design pattern, we intentionally named outputTask the same on
    both parent (Task) and child (XYZ), so that we could take advantage of overriding
    (polymorphism). In behavior delegation, we do the opposite: we avoid if at all
    possible naming things the same at different levels of the [[Prototype]] chain
    (called shadowing -- see Chapter 5), because having those name collisions creates
    awkward/brittle syntax to disambiguate references (see Chapter 4), and we want to
    avoid that if we can.

    This design pattern calls for less of general method names which are prone to
    overriding and instead more of descriptive method names, specific to the type of
    behavior each object is doing. This can actually create easier to understand/maintain
    code, because the names of methods (not only at definition location but strewn
    throughout other code) are more obvious (self documenting).

  3. this.setID(ID); inside of a method on the XYZ object first looks on XYZ for
    setID(..), but since it doesn't find a method of that name on XYZ, [[Prototype]]
    delegation means it can follow the link to Task to look for setID(..), which it
    of course finds. Moreover, because of implicit call-site this binding rules
    (see Chapter 2), when setID(..) runs, even though the method was found on Task,
    the this binding for that function call is XYZ exactly as we'd expect and want.
    We see the same thing with this.outputID() later in the code listing.

    In other words, the general utility methods that exist on Task are available to us while interacting with XYZ, because XYZ can delegate to Task.

The "class" in javascript is tempting to use, but it simply masks the true
  workings of the language and should not be used.

Concise functions in javascript can be declared inside an object by:
  var Foo = {
    bar() { /*..*/ }
  }
  The downside is that they are anonymous functions

OOLO is also good for testing the prototype of objects
  Foo.isPrototypeOf( Bar );
  Object.getPrototypeOf( Bar ) === Foo;

OOLO is usually better in various aspects. For example, there is no reason to
  modify the constructor or prototype.
